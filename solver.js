const Board = require('./src/Board');

let board = new Board(
  [
    '      ',
    '^     ',
    '   %  ',
    '      ',
    '      ',
    '      '
  ],
  [2, 2, 0, 4, 0, 2],
  [0, 3, 2, 1, 2, 2],
  [3, 2, 2, 1, 1, 1]
);

board.solve();

board = new Board(
  [
    '^ ^  =  ',
    '        ',
    '    <   ',
    '        ',
    '<    <  ',
    '        ',
    ' =      ',
    '        '
  ],
  [3, 2, 4, 2, 1, 3, 2, 2],
  [4, 2, 3, 0, 7, 0, 2, 1],
  [4, 3, 3, 2, 2, 2, 1, 1, 1]
);

board.solve();

board = new Board(
  [
    ' >        ',
    '          ',
    '          ',
    '     %    ',
    'v         ',
    '         o',
    '          ',
    '  <  = >  ',
    '          ',
    '          '
  ],
  [3, 2, 5, 1, 1, 5, 1, 2, 2, 3],
  [2, 4, 2, 4, 3, 3, 0, 6, 0, 1],
  [5, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1]
);

board.solve();

board = new Board(
  [
    '      <     o  ',
    '               ',
    '               ',
    '            >  ',
    '  >     =      ',
    '     <  %      ',
    '               ',
    '  >          o ',
    '      ^        ',
    '      %        ',
    '               ',
    '  %            ',
    '  %  < >       ',
    '               ',
    '               '
  ],
  [1, 2, 6, 1, 1, 3, 6, 3, 2, 2, 0, 1, 4, 2, 0],
  [7, 0, 1, 2, 3, 6, 0, 3, 1, 3, 2, 1, 4, 1, 0],
  [5, 4, 4, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1]
);

board.solve();

board = new Board(
  [
    '       o    <  ',
    '               ',
    '               ',
    ' <             ',
    '      <        ',
    '  % >          ',
    '               ',
    '    <%     <%  ',
    '               ',
    '               ',
    '          <  > ',
    '  %            ',
    '  %    =   ^   ',
    '               ',
    '       o       '
  ],
  [1, 2, 7, 1, 2, 1, 4, 4, 0, 0, 1, 4, 3, 3, 1],
  [4, 0, 1, 2, 2, 4, 0, 6, 1, 1, 5, 2, 3, 2, 1],
  [5, 4, 4, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1]
);

board.solve();

board = new Board(
  [
    '       < >     ',
    '               ',
    '               ',
    '               ',
    '               ',
    '               ',
    '  >      < >   ',
    '              >',
    '               ',
    '        ^      ',
    'v     v   ^    ',
    '               ',
    '  o     v      ',
    '               ',
    '               '
  ],
  [3, 1, 2, 1, 0, 0, 6, 1, 5, 2, 4, 2, 1, 5, 1],
  [5, 0, 0, 4, 0, 0, 6, 3, 2, 4, 5, 2, 2, 1, 0],
  [5, 4, 4, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1]
);

board.solve();

board = new Board(
  [
    '          ^    ',
    '               ',
    '          %    ',
    ' < >        %  ',
    '               ',
    '^              ',
    '               ',
    '%          v   ',
    '              >',
    '               ',
    '         %    >',
    'o v            ',
    '               ',
    ' =             ',
    '            =  ',
  ],
  [5, 2, 3, 1, 1, 1, 0, 1, 1, 1, 6, 2, 5, 2, 3],
  [1, 1, 2, 5, 2, 1, 2, 4, 3, 0, 8, 2, 0, 1, 2],
  [5, 4, 4, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1]
);

board.solve();

board = new Board(
  [
    '  ^            ',
    '       >       ',
    '  %          v ',
    '    o      o   ',
    '               ',
    '          < %  ',
    '  < >          ',
    '       %       ',
    '         o     ',
    'v              ',
    '     <         ',
    '             < ',
    '          >    ',
    '               ',
    '               '
  ],
  [2, 0, 6, 1, 3, 2, 2, 5, 1, 2, 2, 2, 1, 4, 1],
  [1, 5, 2, 3, 1, 5, 4, 1, 3, 1, 2, 2, 4, 0, 0],
  [5, 4, 4, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1]
);

board.solve();


// const classMap = {
//   'blank': ' ',
//   'cap-top revealed': '^',
//   'cap-right revealed': '>',
//   'cap-bottom revealed': 'v',
//   'cap-left revealed': '<',
//   'water revealed': '=',
//   'sub revealed': 'o',
//   'middle revealed': '%'
// };
// let board = [];
// $('.puzzle tbody tr:not(:first)').map((i, tr) => {
//   const row = [...$(tr).find('i').map((i, node) => classMap[node.className])].join('');
//   board.push(row);
// });

